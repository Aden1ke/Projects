#include "main.h"

/* Handle field width. */
int handle_width(const char *format, int *i, char specifier, va_list args) {
    int width = 0, j;
    int printed_chars = 0;
    int text_length = 0; // Length of the text to be printed
    int padding_length;
    char padding_char = ' '; // Default padding character is space
    int left_justify = 0;

    text_length = get_text_length(specifier, args);

    // Check if the width is specified using an asterisk
    if (format[*i] == '*') {
        width = va_arg(args, int);
        (*i)++;
    } else {
        // Calculate width if it's a number in the format string
        while (format[*i] >= '0' && format[*i] <= '9') {
            width =  atoi(&format[*i]);
            (*i)++;
        }
    }

    // Check for flags
    if (format[*i - 1] == '-') {
        left_justify = 1;
    } else if (format[*i - 1] == '0') {
        padding_char = '0';
    }

    padding_length = width - text_length;
    printf("\ntext_length = %d\n", text_length);
    printf("\nwidth = %d\n", width);
    printf("\npadding_length = %d\n", padding_length);

    // If padding length is negative, no padding is needed
    if (padding_length < 0) {
        padding_length = 0;
    }

    // If left-justified, print the text first, then add spaces
    if (left_justify) {
        printed_chars += text_length;
        for (j = 0; j < padding_length; j++) {
            add_to_buffer(' ');
            printed_chars++;
        }
    } else {
        // If right-justified or zero-padded, add padding first, then print the text
        for (j = 0; j < padding_length; j++) {
            add_to_buffer(padding_char);
            printed_chars++;
        }
        printed_chars += text_length;
    }

    return printed_chars;
}
